@using MessageWeb1.Models
@{
    Layout = null;
    var currentUser = ViewBag.CurrentUser as string;
    var toUser = ViewBag.ToUser as string;
}
<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Giao diện Nhắn tin</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet"> 
    <link href="/css/ScreenMessage.css" rel="stylesheet" />
</head>

<body>
    <div class="sidebar">
        <div class="search-bar">
            <input type="text" placeholder="Tìm kiếm">
        </div>
        <div class="tabs">
            <div class="tab active">Ưu tiên</div>
            <div class="tab">Khác</div>
        </div>



        <div class="conversations">
            <div class="conversation">
                <div class="conversation-info">
                    @foreach (var friend in ViewBag.ListFriend ?? new List<UserContact>()) {
                        <div class="friend-item">
                            <div class="friend-avatar">
                                <img src="@friend.Contact.AvatarUrl" alt="@friend.Contact.Username's avatar" width="40" height="40" />
                            </div>
                            <div class="friend-details">
                                <a href="@Url.Action("Index", "Chat", new { toUser =@friend.Contact.Username })">Chat</a>
                                <div class="friend-time">Kết bạn lúc @friend.CreatedAt.ToString("dd/MM/yyyy")</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="chat-container">
        <div class="chat-header">
            <div class="avatar">
                <img src="/api/placeholder/48/48" alt="group avatar">
            
            </div>
            <a href="@Url.Action("Logout", "Login")"
               onclick="return confirm('Bạn có chắc chắn muốn đăng xuất?')">
                Đăng xuất
            </a>s
            <div class="receiver-container">
                <div class="group-name" >@toUser</div>
                <input type="text" id="receiverInput" value="@toUser" hidden />
                <div class="group-members">
                    @{
                        bool isOnline = ViewBag.ToUserOnline ?? false;
                        DateTime? lastSeen = ViewBag.ToUserLastSeen as DateTime?;

                        if (isOnline) {
                            <span style="color: green;">🟢 Online</span>
                        }
                        else if (lastSeen.HasValue) {
                            <span style="color: gray;">🕒 Last seen: @lastSeen.Value.ToString("dd/MM/yyyy HH:mm")</span>
                        }
                        else {
                            <span style="color: gray;">⚪ Offline</span>
                        }
                    } 

                </div>
            </div>
     
        </div>

        <div class="messages-area" style="height: 300px; overflow-y: auto;">
            <ul id="messagesList">
                @foreach (var msg in ViewBag.Conversation ?? new List<Message>()) {
                    <li class="message-bubble @(msg.Sender.Username == currentUser ? " sent" : "received" )">
                        <div class="sender-name">
                            @(msg.Sender.Username == currentUser ? "Bạn" : msg.Sender.Username)
                        </div>
                        @msg.Content
                        <div class="message-time">@msg.SentAt.ToString("HH:mm")</div>
                    </li>
                }
            </ul>
            <div id="typingIndicator" class="typing-indicator"></div>
        </div>

        <div class="input-area">
            <input type="text" id="messageInput" placeholder="Nhập tin nhắn..." autocomplete="off" />
            <button class="send-button" id="sendButton" onclick="sendMessage()">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script> 

            // Logout function
        function logout() {
            if (confirm("Bạn có chắc chắn muốn đăng xuất?")) {
                console.log("Cop cai lol");
                window.location.href = "/Login/Logout";
            }
        }
        window.onload = scrollToBottom;
        // SignalR Connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // UI elements
        const messageInput = document.getElementById("messageInput");
        const receiverInput = document.getElementById("receiverInput");
        const messagesList = document.getElementById("messagesList");
        const sendButton = document.getElementById("sendButton");
        const typingIndicator = document.getElementById("typingIndicator");

        // Start connection
        async function startConnection() {
            try {
                await connection.start();
                console.log("SignalR Connected");
                sendButton.disabled = false;

                // Join the user to their personal group
                await connection.invoke("AddToGroup", "@currentUser");
            } catch (err) {
                console.error("SignalR Connection Error: ", err);
                setTimeout(startConnection, 5000);
            }
        }

        connection.onclose(async () => {
            sendButton.disabled = true;
            await startConnection();
        });

        // Start the connection
        startConnection();

        // Send message when Enter is pressed
        messageInput.addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                sendMessage();
            }
        });

        // Receive message from others
        connection.on("ReceiveMessage", (sender, message, timestamp) => {
            if (sender !== "@currentUser") { // Only add if not from current user
                addMessage(sender, message, "received", timestamp);
            }
        });

        // Receive own message confirmation
        connection.on("ReceiveOwnMessage", (message, timestamp) => {
            addMessage("Bạn", message, "sent", timestamp);
        });

        // Typing indicator
        let typingTimer;
        connection.on("UserTyping", (sender) => {
            if (sender !== "@currentUser" && sender === receiverInput.value.trim()) {
                typingIndicator.textContent = `${sender} đang soạn tin...`;
                typingIndicator.classList.add("typing-active");

                clearTimeout(typingTimer);
                typingTimer = setTimeout(() => {
                    typingIndicator.classList.remove("typing-active");
                }, 2000);
            }
        });

        // Add message to UI
        function addMessage(sender, message, type, timestamp) {
            const li = document.createElement("li");
            li.className = `message-bubble ${type}`;

            const senderDiv = document.createElement("div");
            senderDiv.className = "sender-name";
            senderDiv.textContent = sender;

            const timeDiv = document.createElement("div");
            timeDiv.className = "message-time";
            timeDiv.textContent = formatTime(timestamp);

            li.appendChild(senderDiv);
            li.appendChild(document.createTextNode(message));
            li.appendChild(timeDiv);

            messagesList.appendChild(li);
            scrollToBottom();

            // Hide typing indicator when message received
            if (sender !== "Bạn") {
                typingIndicator.classList.remove("typing-active");
            }
        }

        // Format time
        function formatTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        // Scroll to bottom of messages
        function scrollToBottom() {
            const messagesArea = document.querySelector(".messages-area");
            messagesArea.scrollTop = messagesArea.scrollHeight;
        }

        // Send message
        async function sendMessage() {
            const receiver = receiverInput.value.trim();
            const message = messageInput.value.trim();

            if (!receiver) {
                alert("Vui lòng nhập người nhận!");
                receiverInput.focus();
                return;
            }

            if (!message) {
                alert("Vui lòng nhập nội dung tin nhắn!");
                messageInput.focus();
                return;
            }

            try {
                sendButton.disabled = true;
                await connection.invoke("SendMessage", receiver, message);
                messageInput.value = "";
                messageInput.focus();
            } catch (err) {
                console.error("Send Message Error: ", err);
                alert("Gửi tin nhắn thất bại: " + err.message);
            } finally {
                sendButton.disabled = false;
            }
        }


        // Typing indicator - send when user is typing
        let lastTypingTime = 0;
        messageInput.addEventListener("input", () => {
            const receiver = receiverInput.value.trim();
            if (!receiver) return;

            const now = Date.now();
            if (now - lastTypingTime > 1000) { // Throttle to once per second
                connection.invoke("SendTypingIndicator", receiver)
                    .catch(err => console.error("Typing indicator error:", err));
                lastTypingTime = now;
            }
        });
   

    

    </script>
</body>

</html>