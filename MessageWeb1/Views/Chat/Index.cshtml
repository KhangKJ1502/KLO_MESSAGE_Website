@using MessageWeb1.Models
@{
    Layout = null;
    var currentUser = ViewBag.CurrentUser as string;
    var toUser = ViewBag.ToUser as string;
}
<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Giao diện Nhắn tin</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    @* <link href="/css/ScreenMessage.css" rel="stylesheet" /> *@  

    <style>
        /* Nền mờ toàn màn hình */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background-color: rgba(0, 0, 0, 0.6);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        /* Nội dung modal */
        .modal-content {
            background-color: white;
            padding: 20px 30px;
            border-radius: 12px;
            text-align: center;
            position: relative;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
            max-width: 400px;
            width: 90%;
        }

        /* Nút đóng */
        .close {
            position: absolute;
            top: 10px;
            right: 15px;
            font-size: 24px;
            font-weight: bold;
            color: #333;
            cursor: pointer;
        }
    </style>

    <style>
        /* Base styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f0f2f5;
            height: 100vh;
            overflow: hidden;
        }

        /* Main container */
        .main-container {
            display: flex;
            width: 100%;
            height: 100vh;
            background-color: #fff;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        /* Left section containing sidebar and chat */
        .left-section {
            display: flex;
            width: 75%;
            height: 100%;
        }

        /* Sidebar Styling */
        .sidebar {
            width: 280px;
            background-color: #f8f9fa;
            border-right: 1px solid #e1e4e8;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .search-bar {
            padding: 15px;
            border-bottom: 1px solid #e1e4e8;
            position: relative;
        }

            .search-bar input {
                width: 100%;
                padding: 10px 15px;
                border-radius: 20px;
                border: 1px solid #ddd;
                background-color: #f0f2f5;
                font-size: 14px;
                outline: none;
                transition: all 0.3s;
            }

                .search-bar input:focus {
                    background-color: #fff;
                    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
                }

            .search-bar::after {
                content: '\f002';
                font-family: 'Font Awesome 5 Free';
                font-weight: 900;
                position: absolute;
                right: 25px;
                top: 25px;
                color: #65676b;
            }

        /* Tabs */
        .tabs {
            display: flex;
            border-bottom: 1px solid #e1e4e8;
        }

        .tab {
            flex: 1;
            text-align: center;
            padding: 12px 0;
            color: #65676b;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }

            .tab.active {
                color: #1877f2;
                border-bottom: 3px solid #1877f2;
            }

        /* Conversations list */
        .conversations {
            flex: 1;
            overflow-y: auto;
        }

        .friend-item {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            cursor: pointer;
            transition: background-color 0.2s;
            border-bottom: 1px solid #f0f2f5;
        }

            .friend-item:hover {
                background-color: #f0f2f5;
            }

        .friend-avatar {
            margin-right: 15px;
            position: relative;
        }

            .friend-avatar img {
                width: 50px;
                height: 50px;
                border-radius: 50%;
                object-fit: cover;
                border: 1px solid #e1e4e8;
            }

        .friend-details {
            flex: 1;
        }

            .friend-details a {
                color: #050505;
                font-weight: 500;
                text-decoration: none;
                display: block;
                margin-bottom: 4px;
                font-size: 15px;
            }

        .friend-time {
            color: #65676b;
            font-size: 12px;
        }

        /* Chat Container */
        .chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            background-color: #fff;
        }

        .chat-header {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            border-bottom: 1px solid #e1e4e8;
            background-color: #f8f9fa;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
        }

        .avatar {
            margin-right: 15px;
        }

            .avatar img {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                object-fit: cover;
                border: 1px solid #e1e4e8;
            }

        .receiver-container {
            flex: 1;
        }

        .group-name {
            font-weight: 600;
            font-size: 16px;
            color: #050505;
        }

        .group-members {
            font-size: 13px;
            color: #65676b;
        }

        .chat-header a {
            padding: 8px 12px;
            background-color: #f0f2f5;
            color: #050505;
            border-radius: 4px;
            text-decoration: none;
            font-size: 14px;
            margin-left: auto;
            transition: background-color 0.2s;
        }

            .chat-header a:hover {
                background-color: #e4e6eb;
            }

        /* Messages Area */
        .messages-area {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background-color: #f0f2f5;
            background-image: linear-gradient(rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0.7)), url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect width="100" height="100" fill="none"/><path d="M0 50 Q25 0, 50 50 T 100 50 T 150 50" stroke="%23e1e4e8" fill="none" stroke-width="1"/></svg>');
            background-size: 200px;
        }

        #messagesList {
            list-style: none;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        /* Message Bubbles */
        .message-bubble {
            display: flex;
            flex-direction: column;
            max-width: 65%;
            margin-bottom: 15px;
            position: relative;
            border-radius: 18px;
            word-wrap: break-word;
            animation: fadeIn 0.3s ease-out;
        }

            .message-bubble.received {
                align-self: flex-start;
                margin-right: auto;
                background-color: transparent;
            }

            .message-bubble.sent {
                align-self: flex-end;
                margin-left: auto; 
                background-color: transparent;
            }

        /* Sender information */
        .sender-name {
            font-size: 12px;
            font-weight: 500;
            margin-bottom: 4px;
            padding: 0 15px;
        }

        /* Message content styling */
        .message-content {
            padding: 10px 15px;
            line-height: 1.4;
        }

        .message-bubble.received .message-content {
            background-color: #ffffff;
            color: #050505;
            border-top-left-radius: 18px;
            border-top-right-radius: 18px;
            border-bottom-right-radius: 18px;
            border-bottom-left-radius: 4px;
        }

        .message-bubble.sent .message-content {
            background-color: #0084ff;
            background-image: linear-gradient(135deg, #0084ff, #0099ff);
            color: white;
            border-top-left-radius: 18px;
            border-top-right-radius: 18px;
            border-bottom-left-radius: 18px;
            border-bottom-right-radius: 4px;
        }

        /* Message timestamp */
        .message-time {
            font-size: 11px;
            margin-top: 4px;
            padding: 0 15px;
            align-self: flex-end;
        }

        .message-bubble.received .message-time {
            color: #65676b;
        }

        .message-bubble.sent .message-time {
            color: #65676b;
        }

        /* Typing indicator */
        .typing-indicator {
            color: #65676b;
            font-size: 13px;
            margin: 10px 0;
            height: 20px;
            display: none;
            padding: 8px 15px;
            background-color: rgba(255, 255, 255, 0.7);
            border-radius: 15px;
            width: fit-content;
        }

            .typing-indicator.typing-active {
                display: flex;
                align-items: center;
                animation: pulse 1.5s infinite;
            }

            .typing-indicator::before {
                content: "";
                display: inline-block;
                width: 30px;
                height: 10px;
                margin-right: 5px;
                background-image: url("data:image/svg+xml,%3Csvg width='30px' height='10px' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='5' cy='5' r='3' fill='%2365676b'%3E%3Canimate attributeName='opacity' from='1' to='0.3' dur='1s' repeatCount='indefinite' begin='0s'/%3E%3C/circle%3E%3Ccircle cx='15' cy='5' r='3' fill='%2365676b'%3E%3Canimate attributeName='opacity' from='1' to='0.3' dur='1s' repeatCount='indefinite' begin='0.3s'/%3E%3C/circle%3E%3Ccircle cx='25' cy='5' r='3' fill='%2365676b'%3E%3Canimate attributeName='opacity' from='1' to='0.3' dur='1s' repeatCount='indefinite' begin='0.6s'/%3E%3C/circle%3E%3C/svg%3E");
                background-repeat: no-repeat;
            }

        /* Input Area */
        .input-area {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            background-color: #f8f9fa;
            border-top: 1px solid #e1e4e8;
        }

        #messageInput {
            flex: 1;
            padding: 12px 15px;
            border-radius: 20px;
            border: 1px solid #ddd;
            outline: none;
            font-size: 14px;
            background-color: #f0f2f5;
            transition: all 0.3s;
        }

            #messageInput:focus {
                background-color: #fff;
                box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
                border-color: #0084ff;
            }

        .send-button {
            margin-left: 10px;
            background-color: #0084ff;
            color: white;
            border: none;
            width: 42px;
            height: 42px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            transition: all 0.2s;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

            .send-button:hover {
                background-color: #006adc;
                transform: scale(1.05);
            }

            .send-button:active {
                transform: scale(0.95);
            }

            .send-button:disabled {
                background-color: #cccccc;
                cursor: not-allowed;
                transform: none;
                box-shadow: none;
            }

        /* Right Sidebar */
        .right-sidebar {
            width: 25%;
            height: 100%;
            border-left: 1px solid #e1e4e8;
            padding: 15px;
            background-color: #f8f9fa;
            display: flex;
            flex-direction: column;
        }

        /* Profile Section */
        .profile-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px 0;
            border-bottom: 1px solid #e1e4e8;
        }

        .profile-avatar {
            position: relative;
            margin-bottom: 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

            .profile-avatar img {
                width: 120px;
                height: 120px;
                border-radius: 50%;
                object-fit: cover;
                border: 3px solid #1877f2;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
                transition: all 0.3s ease;
            }

                .profile-avatar img:hover {
                    transform: scale(1.05);
                }

        .edit-avatar {
            position: absolute;
            bottom: 5px;
            right: 5px;
            background-color: #1877f2;
            color: white;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            transition: background-color 0.2s;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

            .edit-avatar:hover {
                background-color: #166fe5;
                transform: scale(1.1);
            }

        .profile-avatar button {
            background-color: #1877f2;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s;
            margin-top: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

            .profile-avatar button:hover {
                background-color: #166fe5;
                transform: translateY(-2px);
            }

            .profile-avatar button:active {
                transform: translateY(0);
            }

            .profile-avatar button:disabled {
                background-color: #cccccc;
                cursor: not-allowed;
                transform: none;
                box-shadow: none;
            }

        .user-name {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 5px;
            color: #050505;
        }

        .user-status {
            font-size: 14px;
            color: #65676b;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        /* Profile Actions */
        .profile-actions {
            display: flex;
            flex-direction: column;
            width: 100%;
            padding: 20px 0;
            gap: 8px;
        }

        .action-button {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            background-color: #f0f2f5;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s;
            color: #050505;
        }

            .action-button:hover {
                background-color: #e4e6eb;
                transform: translateX(5px);
            }

            .action-button i {
                width: 20px;
                margin-right: 12px;
                color: #1877f2;
                font-size: 16px;
            }

        /* Scrollbar styling */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        ::-webkit-scrollbar-thumb {
            background: #c2c2c2;
            border-radius: 10px;
        }

            ::-webkit-scrollbar-thumb:hover {
                background: #a8a8a8;
            }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 4px;
            background: #fff;
            box-shadow: 0 3px 10px rgba(0,0,0,0.2);
            z-index: 9999;
            transform: translateY(-20px);
            opacity: 0;
            transition: all 0.3s ease;
        }

            .toast.show {
                transform: translateY(0);
                opacity: 1;
            }

        .toast-success {
            border-left: 4px solid #42b72a;
        }

        .toast-error {
            border-left: 4px solid #ff3b30;
        }
    </style>
</head>

<body>
    <div class="main-container">
        <div class="left-section">
            <!-- Sidebar with contacts -->
            <div class="sidebar">
                <div class="search-bar">
                    <input type="text" placeholder="Tìm kiếm bạn bè">
                </div>
                <div class="tabs">
                    <div class="tab active">Ưu tiên</div>
                    <div class="tab">Khác</div>
                </div>
                <div class="conversations">
                    @foreach (var friend in ViewBag.ListFriend ?? new List<UserContact>()) {
                        <div class="friend-item">
                            <div class="friend-avatar">
                                <img src="@friend.Contact.AvatarUrl" alt="@friend.Contact.Username's avatar">
                            </div>
                            <div class="friend-details">
                                <a href="@Url.Action("Index", "Chat", new { toUser = @friend.Contact.Username })">@friend.Contact.Username</a>
                                <div class="friend-time">Kết bạn lúc @friend.CreatedAt.ToString("dd/MM/yyyy")</div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Chat container -->
            <div class="chat-container"> 
                
                <!-- Chat header -->
                <div class="chat-header">
                    <div class="avatar">
                            
<img src="@(!string.IsNullOrEmpty(ViewBag.ToUserAvatar) ? ViewBag.ToUserAvatar : Url.Content("/Image/b55138a4-1adb-4a77-bc4d-7ac35be450e6.png"))" 
     alt="@toUser avatar" 
     class="avatar-img" />
</div>
                    <div class="receiver-container">
                        <div class="group-name">@toUser</div>
                        <input type="text" id="receiverInput" value="@toUser" hidden>
                        <div class="group-members">
                            @{
                                bool isOnline = ViewBag.ToUserOnline ?? false;
                                DateTime? lastSeen = ViewBag.ToUserLastSeen as DateTime?;

                                if (isOnline) {
                                    <span style="color: #42b72a;">🟢 Online</span>
                                }
                                else if (lastSeen.HasValue) {
                                    <span style="color: #65676b;">🕒 Last seen: @lastSeen.Value.ToString("dd/MM/yyyy HH:mm")</span>
                                }
                                else {
                                    <span style="color: #65676b;">⚪ Offline</span>
                                }
                            }
                        </div>
                    </div>
                    <a href="@Url.Action("Logout", "Login")"
                       onclick="return confirm('Bạn có chắc chắn muốn đăng xuất?')">
                        <i class="fas fa-sign-out-alt"></i> Đăng xuất
                    </a>
                </div>

                <!-- Messages area -->
                <div class="messages-area">
                    <ul id="messagesList">
                        @foreach (var msg in ViewBag.Conversation ?? new List<Message>()) {
                            <li class="message-bubble @(msg.Sender.Username == currentUser ? "sent" : "received")">
                                <div class="sender-name">
                                    @(msg.Sender.Username == currentUser ? "Bạn" : msg.Sender.Username)
                                </div>
                                <div class="message-content">@msg.Content</div>
                                <div class="message-time">@msg.SentAt.ToString("HH:mm")</div>
                            </li>
                        }
                    </ul>
                    <div id="typingIndicator" class="typing-indicator">đang soạn tin...</div>
                </div>

                <!-- Input area -->
                <div class="input-area">
                    <input type="text" id="messageInput" placeholder="Nhập tin nhắn..." autocomplete="off">
                    <button class="send-button" id="sendButton" onclick="sendMessage()">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>

        <!-- Right sidebar with user profile -->
        <div class="right-sidebar">
            <div class="profile-section">
                <div class="profile-avatar">
                    <img id="userAvatar" src="@(ViewBag.CurrentUserAvatar ?? "/Image/b55138a4-1adb-4a77-bc4d-7ac35be450e6.png")" alt="Your avatar">
                    <div class="edit-avatar" onclick="document.getElementById('avatarInput').click()">
                        <i class="fas fa-camera"></i>
                    </div>
                    <input type="file" id="avatarInput" style="display: none" accept="image/*" onchange="previewAvatar()">
                    <button id="uploadButton" style="display: none;" onclick="uploadAvatar()">Cập nhật ảnh đại diện</button>
                </div>
                <div class="user-name">@currentUser</div>
                <div class="user-status">
                    <span style="color: #42b72a;">🟢 Online</span>
                </div>
            </div> 

            <!-- Modal popup for avatar preview -->
            <div id="avatarModal" class="modal">
                <div class="modal-content">
                    <span class="close" onclick="closeModal()">&times;</span>
                    <h3>Xem trước ảnh đại diện</h3>
                    <img id="avatarPreview" style="max-width: 100%; height: auto; margin: 15px 0; border-radius: 8px;" alt="Avatar preview">
                    <div style="display: flex; justify-content: space-between; margin-top: 20px;">
                        <button onclick="closeModal()" style="padding: 8px 15px; background-color: #f0f2f5; border: none; border-radius: 4px; cursor: pointer;">Hủy</button>
                        <button onclick="uploadAvatar()" style="padding: 8px 15px; background-color: #1877f2; color: white; border: none; border-radius: 4px; cursor: pointer;">Xác nhận</button>
                    </div>
                </div>
            </div>


            <div class="profile-actions">
                <div class="action-button" onclick="editProfile()">
                    <i class="fas fa-user-edit"></i>
                    <span>Chỉnh sửa thông tin cá nhân</span>
                </div>
                <div class="action-button" onclick="changeStatus()">
                    <i class="fas fa-circle"></i>
                    <span>Thay đổi trạng thái</span>
                </div>
                <div class="action-button" onclick="showSettings()">
                    <i class="fas fa-cog"></i>
                    <span>Cài đặt tài khoản</span>
                </div>
                <div class="action-button" onclick="showThemes()">
                    <i class="fas fa-palette"></i>
                    <span>Thay đổi giao diện</span>
                </div>
                <div class="action-button" onclick="showPrivacy()">
                    <i class="fas fa-shield-alt"></i>
                    <span>Quyền riêng tư</span>
                </div>
            </div>
        </div>
    </div>

    <script src="/main.js?v=20250412"></script>
    <link rel="stylesheet" href="/style.css?v=1.3.5">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>


                // Tạo hàm hiển thị toast
        function showToast(message, type = 'success') {
          // Tạo element toast
          const toast = document.createElement('div');
          toast.className = `toast toast-${type}`;
          toast.textContent = message;

          // Thêm vào body
          document.body.appendChild(toast);

          // Hiệu ứng hiển thị
          setTimeout(() => toast.classList.add('show'), 10);

          // Tự động ẩn sau 3 giây
          setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
          }, 3000);
        }



        // Logout function
        function logout() {
            if (confirm("Bạn có chắc chắn muốn đăng xuất?")) {
                window.location.href = "/Login/Logout";
            }
        }

                // Preview avatar before upload
        function previewAvatar() {
            const input = document.getElementById('avatarInput');
            const file = input.files[0];

            if (!file) {
                return;
            }

            // Check file type
            if (!file.type.match('image.*')) {
                alert('Vui lòng chọn file ảnh hợp lệ!');
                return;
            }

            // Check file size (max 5MB)
            if (file.size > 5 * 1024 * 1024) {
                alert('Kích thước ảnh không được vượt quá 5MB!');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                // Show preview in modal
                const preview = document.getElementById('avatarPreview');
                preview.src = e.target.result;
                document.getElementById('avatarModal').style.display = 'flex';
            };

            reader.readAsDataURL(file);
        }

        // Upload avatar to server
              // Update the uploadAvatar function to also update the header avatar
        async function uploadAvatar() {
            const input = document.getElementById('avatarInput');
            const file = input.files[0];

            if (!file) {
                alert('Vui lòng chọn ảnh');
                return;
            }

            // Show loading state
            const uploadButton = document.querySelector('.modal-content button:last-child');
            const originalText = uploadButton.textContent;
            uploadButton.textContent = 'Đang tải lên...';
            uploadButton.disabled = true;

            const formData = new FormData();
            formData.append('file', file);

            try {
                const response = await fetch('/api/upload-avatar', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) throw new Error("Upload thất bại");

                const data = await response.json();

                // Update all instances of the user's avatar with new image URL
                document.getElementById('userAvatar').src = data.imageUrl;

                // Update avatar in chat header if this is the current user's avatar
                const currentUsername = "@currentUser"; // This value comes from your Razor template
                const headerAvatar = document.querySelector('.chat-header .avatar img');

                // Only update the header avatar if it belongs to the current user
                if (currentUsername === "@currentUser") { // This is your own avatar
                    // Update your avatar in the chat header if applicable
                    headerAvatar.src = data.imageUrl;
                }

                // Close modal
                closeModal();

                // Show success message
                showToast('Cập nhật ảnh đại diện thành công!', 'success');
            } catch (error) {
                console.error('Lỗi upload:', error);
                alert('Upload thất bại! Vui lòng thử lại sau.');
            } finally {
                // Reset button state
                uploadButton.textContent = originalText;
                uploadButton.disabled = false;
            }
        }

        // Close avatar modal
        function closeModal() {
            document.getElementById('avatarModal').style.display = 'none';
            document.getElementById('avatarInput').value = ''; // Clear file input
        }

        function closeModal() {
            document.getElementById('avatarModal').style.display = 'none';
        }


        function editProfile() {
            alert("Chức năng đang phát triển: Chỉnh sửa thông tin cá nhân");
            // Triển khai thực tế: Chuyển hướng đến trang chỉnh sửa hồ sơ
        }

        function changeStatus() {
            alert("Chức năng đang phát triển: Thay đổi trạng thái hiển thị");
            // Triển khai thực tế: Mở modal để chọn trạng thái
        }

        function showSettings() {
            alert("Chức năng đang phát triển: Cài đặt tài khoản");
            // Triển khai thực tế: Chuyển hướng đến trang cài đặt
        }

        function showThemes() {
            alert("Chức năng đang phát triển: Tùy chọn giao diện");
            // Triển khai thực tế: Mở modal để chọn theme
        }

        function showPrivacy() {
            alert("Chức năng đang phát triển: Cài đặt quyền riêng tư");
            // Triển khai thực tế: Chuyển hướng đến trang quyền riêng tư
        }

        window.onload = scrollToBottom;
        // SignalR Connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // UI elements
        const messageInput = document.getElementById("messageInput");
        const receiverInput = document.getElementById("receiverInput");
        const messagesList = document.getElementById("messagesList");
        const sendButton = document.getElementById("sendButton");
        const typingIndicator = document.getElementById("typingIndicator");

        // Start connection
        async function startConnection() {
            try {
                await connection.start();
                console.log("SignalR Connected");
                sendButton.disabled = false;

                // Join the user to their personal group
                await connection.invoke("AddToGroup", "@currentUser");
            } catch (err) {
                console.error("SignalR Connection Error: ", err);
                setTimeout(startConnection, 5000);
            }
        }

        connection.onclose(async () => {
            sendButton.disabled = true;
            await startConnection();
        });

        // Start the connection
        startConnection();

        // Send message when Enter is pressed
        messageInput.addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                sendMessage();
            }
        });

        // Receive message from others
        connection.on("ReceiveMessage", (sender, message, timestamp) => {
            if (sender !== "@currentUser") { // Only add if not from current user
                addMessage(sender, message, "received", timestamp);
            }
        });

        // Receive own message confirmation
        connection.on("ReceiveOwnMessage", (message, timestamp) => {
            addMessage("Bạn", message, "sent", timestamp);
        });

        // Typing indicator
        let typingTimer;
        connection.on("UserTyping", (sender) => {
            if (sender !== "@currentUser" && sender === receiverInput.value.trim()) {
                typingIndicator.textContent = `${sender} đang soạn tin...`;
                typingIndicator.classList.add("typing-active");

                clearTimeout(typingTimer);
                typingTimer = setTimeout(() => {
                    typingIndicator.classList.remove("typing-active");
                }, 2000);
            }
        });

        // Add message to UI
        function addMessage(sender, message, type, timestamp) {
            const li = document.createElement("li");
            li.className = `message-bubble ${type}`;

            const senderDiv = document.createElement("div");
            senderDiv.className = "sender-name";
            senderDiv.textContent = sender;

            const contentDiv = document.createElement("div");
            contentDiv.className = "message-content";
            contentDiv.textContent = message;

            const timeDiv = document.createElement("div");
            timeDiv.className = "message-time";
            timeDiv.textContent = formatTime(timestamp);

            li.appendChild(senderDiv);
            li.appendChild(contentDiv);
            li.appendChild(timeDiv);

            messagesList.appendChild(li);
            scrollToBottom();

            // Hide typing indicator when message received
            if (sender !== "Bạn") {
                typingIndicator.classList.remove("typing-active");
            }
        }

        // Format time
        function formatTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        // Scroll to bottom of messages
        function scrollToBottom() {
            const messagesArea = document.querySelector(".messages-area");
            messagesArea.scrollTop = messagesArea.scrollHeight;
        }

        // Send message
        async function sendMessage() {
            const receiver = receiverInput.value.trim();
            const message = messageInput.value.trim();

            if (!receiver) {
                alert("Vui lòng nhập người nhận!");
                receiverInput.focus();
                return;
            }

            if (!message) {
                alert("Vui lòng nhập nội dung tin nhắn!");
                messageInput.focus();
                return;
            }

            try {
                sendButton.disabled = true;
                await connection.invoke("SendMessage", receiver, message);
                messageInput.value = "";
                messageInput.focus();
            } catch (err) {
                console.error("Send Message Error: ", err);
                alert("Gửi tin nhắn thất bại: " + err.message);
            } finally {
                sendButton.disabled = false;
            }
        }

        // Typing indicator - send when user is typing
        let lastTypingTime = 0;
        messageInput.addEventListener("input", () => {
            const receiver = receiverInput.value.trim();
            if (!receiver) return;

            const now = Date.now();
            if (now - lastTypingTime > 1000) { // Throttle to once per second
                connection.invoke("SendTypingIndicator", receiver)
                    .catch(err => console.error("Typing indicator error:", err));
                lastTypingTime = now;
            }
        });
    </script>
</body>

</html>