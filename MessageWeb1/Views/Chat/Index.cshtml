@using MessageWeb1.Models
@{
    Layout = null;
    var currentUser = ViewBag.CurrentUser as string;
    var toUser = ViewBag.ToUser as string;
}
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Application</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f0f2f5;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .chat-container {
            max-width: 800px;
            margin: 20px auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            height: calc(100vh - 40px);
            flex: 1;
        }

        .chat-header {
            padding: 15px;
            background: #4361ee;
            color: white;
            border-radius: 12px 12px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chat-title {
            font-size: 18px;
            font-weight: 500;
        }

        .logout-btn {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 14px;
        }

        .receiver-container {
            background: #f0f2f5;
            padding: 10px 15px;
            border-bottom: 1px solid #e4e6eb;
            display: flex;
            align-items: center;
        }

        .receiver-label {
            margin-right: 10px;
            font-weight: 500;
            color: #444;
        }

        #receiverInput {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
            transition: border 0.3s;
        }

            #receiverInput:focus {
                border-color: #4361ee;
            }

        .messages-area {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            background-color: #f0f2f5;
        }

        #messagesList {
            display: flex;
            flex-direction: column;
            gap: 10px;
            list-style-type: none;
        }

        .message-bubble {
            max-width: 70%;
            padding: 10px 15px;
            border-radius: 18px;
            position: relative;
            word-wrap: break-word;
            line-height: 1.4;
        }

        .sent {
            align-self: flex-end;
            background-color: #4361ee;
            color: white;
            border-bottom-right-radius: 5px;
        }

        .received {
            align-self: flex-start;
            background-color: #e4e6eb;
            color: #050505;
            border-bottom-left-radius: 5px;
        }

        .sender-name {
            font-size: 12px;
            margin-bottom: 4px;
            font-weight: 500;
        }

        .message-time {
            font-size: 10px;
            text-align: right;
            margin-top: 4px;
            opacity: 0.7;
        }

        .input-area {
            display: flex;
            padding: 15px;
            background-color: white;
            border-top: 1px solid #e4e6eb;
            border-radius: 0 0 12px 12px;
        }

        #messageInput {
            flex: 1;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 24px;
            outline: none;
            margin-right: 10px;
            font-size: 15px;
            background-color: #f0f2f5;
            transition: border 0.3s;
        }

            #messageInput:focus {
                border-color: #4361ee;
                background-color: white;
            }

        .send-button {
            background-color: #4361ee;
            color: white;
            border: none;
            border-radius: 50%;
            width: 45px;
            height: 45px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .send-button:hover {
                background-color: #3a56d4;
            }

            .send-button:disabled {
                background-color: #cccccc;
                cursor: not-allowed;
            }

        /* Typing indicator */
        .typing-indicator {
            font-size: 12px;
            color: #666;
            margin-left: 10px;
            font-style: italic;
            display: none;
        }

        .typing-active {
            display: block;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <div class="chat-title">Xin chào: <strong>@currentUser</strong></div>
            <button class="logout-btn" onclick="logout()">
                <i class="fas fa-sign-out-alt"></i> Đăng xuất
            </button>
        </div>

        <div class="receiver-container">
            <label class="receiver-label">Gửi đến:</label>
            <input type="text" id="receiverInput" value="@toUser" placeholder="Nhập tên người nhận" />
        </div>

        <div class="messages-area">
            <ul id="messagesList">
                @foreach (var msg in ViewBag.Conversation ?? new List<Message>()) {
                    <li class="message-bubble @(msg.Sender.Username == currentUser ? "sent" : "received")">
                        <div class="sender-name">@(msg.Sender.Username == currentUser ? "Bạn" : msg.Sender.Username)</div>
                        @msg.Content
                        <div class="message-time">@msg.SentAt.ToString("HH:mm")</div>
                    </li>
                }
            </ul>
            <div id="typingIndicator" class="typing-indicator"></div>
        </div>

        <div class="input-area">
            <input type="text" id="messageInput" placeholder="Nhập tin nhắn..." autocomplete="off" />
            <button class="send-button" id="sendButton" onclick="sendMessage()">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        // SignalR Connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // UI elements
        const messageInput = document.getElementById("messageInput");
        const receiverInput = document.getElementById("receiverInput");
        const messagesList = document.getElementById("messagesList");
        const sendButton = document.getElementById("sendButton");
        const typingIndicator = document.getElementById("typingIndicator");

        // Start connection
        async function startConnection() {
            try {
                await connection.start();
                console.log("SignalR Connected");
                sendButton.disabled = false;

                // Join the user to their personal group
                await connection.invoke("AddToGroup", "@currentUser");
            } catch (err) {
                console.error("SignalR Connection Error: ", err);
                setTimeout(startConnection, 5000);
            }
        }

        connection.onclose(async () => {
            sendButton.disabled = true;
            await startConnection();
        });

        // Start the connection
        startConnection();

        // Send message when Enter is pressed
        messageInput.addEventListener("keypress", function(event) {
            if (event.key === "Enter") {
                event.preventDefault();
                sendMessage();
            }
        });

        // Receive message from others
        connection.on("ReceiveMessage", (sender, message, timestamp) => {
            if (sender !== "@currentUser") { // Only add if not from current user
                addMessage(sender, message, "received", timestamp);
            }
        });

        // Receive own message confirmation
        connection.on("ReceiveOwnMessage", (message, timestamp) => {
            addMessage("Bạn", message, "sent", timestamp);
        });

        // Typing indicator
        let typingTimer;
        connection.on("UserTyping", (sender) => {
            if (sender !== "@currentUser" && sender === receiverInput.value.trim()) {
                typingIndicator.textContent = `${sender} đang soạn tin...`;
                typingIndicator.classList.add("typing-active");

                clearTimeout(typingTimer);
                typingTimer = setTimeout(() => {
                    typingIndicator.classList.remove("typing-active");
                }, 2000);
            }
        });

        // Add message to UI
        function addMessage(sender, message, type, timestamp) {
            const li = document.createElement("li");
            li.className = `message-bubble ${type}`;

            const senderDiv = document.createElement("div");
            senderDiv.className = "sender-name";
            senderDiv.textContent = sender;

            const timeDiv = document.createElement("div");
            timeDiv.className = "message-time";
            timeDiv.textContent = formatTime(timestamp);

            li.appendChild(senderDiv);
            li.appendChild(document.createTextNode(message));
            li.appendChild(timeDiv);

            messagesList.appendChild(li);
            scrollToBottom();

            // Hide typing indicator when message received
            if (sender !== "Bạn") {
                typingIndicator.classList.remove("typing-active");
            }
        }

        // Format time
        function formatTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        // Scroll to bottom of messages
        function scrollToBottom() {
            const messagesArea = document.querySelector(".messages-area");
            messagesArea.scrollTop = messagesArea.scrollHeight;
        }

        // Send message
        async function sendMessage() {
            const receiver = receiverInput.value.trim();
            const message = messageInput.value.trim();

            if (!receiver) {
                alert("Vui lòng nhập người nhận!");
                receiverInput.focus();
                return;
            }

            if (!message) {
                alert("Vui lòng nhập nội dung tin nhắn!");
                messageInput.focus();
                return;
            }

            try {
                sendButton.disabled = true;
                await connection.invoke("SendMessage", receiver, message);
                messageInput.value = "";
                messageInput.focus();
            } catch (err) {
                console.error("Send Message Error: ", err);
                alert("Gửi tin nhắn thất bại: " + err.message);
            } finally {
                sendButton.disabled = false;
            }
        }

        // Logout function
        function logout() {
            if (confirm("Bạn có chắc chắn muốn đăng xuất?")) {
                window.location.href = "/Login/Logout";
            }
        }

        // Typing indicator - send when user is typing
        let lastTypingTime = 0;
        messageInput.addEventListener("input", () => {
            const receiver = receiverInput.value.trim();
            if (!receiver) return;

            const now = Date.now();
            if (now - lastTypingTime > 1000) { // Throttle to once per second
                connection.invoke("SendTypingIndicator", receiver)
                    .catch(err => console.error("Typing indicator error:", err));
                lastTypingTime = now;
            }
        });
    </script>
</body>
</html>